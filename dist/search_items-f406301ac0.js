searchNodes=[{"doc":"App Entry Main Docs and interface for people using this library should be provided here.","ref":"Remedy.html","title":"Remedy","type":"module"},{"doc":"Ratelimit implimentation specific to Discord's API. Only to be used when starting in a rest-only manner.","ref":"Remedy.Api.Ratelimiter.html","title":"Remedy.Api.Ratelimiter","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Remedy.Api.Ratelimiter.html#child_spec/1","title":"Remedy.Api.Ratelimiter.child_spec/1","type":"function"},{"doc":"Empties all buckets, voiding any saved ratelimit values.","ref":"Remedy.Api.Ratelimiter.html#empty_buckets/0","title":"Remedy.Api.Ratelimiter.empty_buckets/0","type":"function"},{"doc":"Retrieves a proper ratelimit endpoint from a given route and url.","ref":"Remedy.Api.Ratelimiter.html#get_endpoint/2","title":"Remedy.Api.Ratelimiter.get_endpoint/2","type":"function"},{"doc":"Callback implementation for GenServer.init/1 .","ref":"Remedy.Api.Ratelimiter.html#init/1","title":"Remedy.Api.Ratelimiter.init/1","type":"function"},{"doc":"Starts the ratelimiter.","ref":"Remedy.Api.Ratelimiter.html#start_link/1","title":"Remedy.Api.Ratelimiter.start_link/1","type":"function"},{"doc":"Return values of start functions.","ref":"Remedy.Api.Ratelimiter.html#t:on_start/0","title":"Remedy.Api.Ratelimiter.on_start/0","type":"type"},{"doc":"Simple cache that stores information for the current user.","ref":"Remedy.Bot.html","title":"Remedy.Bot","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Remedy.Bot.html#child_spec/1","title":"Remedy.Bot.child_spec/1","type":"function"},{"doc":"Returns the current user's state.","ref":"Remedy.Bot.html#get/0","title":"Remedy.Bot.get/0","type":"function"},{"doc":"","ref":"Remedy.Bot.html#start_link/1","title":"Remedy.Bot.start_link/1","type":"function"},{"doc":"Discord CDN functions.","ref":"Remedy.CDN.html","title":"Remedy.CDN","type":"module"},{"doc":"","ref":"Remedy.CDN.html#animated_avatar/2","title":"Remedy.CDN.animated_avatar/2","type":"function"},{"doc":"","ref":"Remedy.CDN.html#animated_emoji/1","title":"Remedy.CDN.animated_emoji/1","type":"function"},{"doc":"","ref":"Remedy.CDN.html#avatar/2","title":"Remedy.CDN.avatar/2","type":"function"},{"doc":"","ref":"Remedy.CDN.html#embed_avatar/1","title":"Remedy.CDN.embed_avatar/1","type":"function"},{"doc":"","ref":"Remedy.CDN.html#emoji/1","title":"Remedy.CDN.emoji/1","type":"function"},{"doc":"","ref":"Remedy.CDN.html#icon/2","title":"Remedy.CDN.icon/2","type":"function"},{"doc":"","ref":"Remedy.CDN.html#splash/2","title":"Remedy.CDN.splash/2","type":"function"},{"doc":"Functions for interracting with the cache.","ref":"Remedy.Cache.html","title":"Remedy.Cache","type":"module"},{"doc":"Consumer process for gateway event handling. Consuming Gateway Events To handle events, Remedy uses a GenStage implementation. Remedy defines the producer and producer_consumer in the GenStage design. To consume the events you must create at least one consumer process. It is generally recommended that you spawn a consumer per core. To find this number you can use System.schedulers_online/0 . Remedy uses a ConsumerSupervisor to dispatch events, meaning your handlers will each be ran in their own seperate task. Example An example consumer can be found here .","ref":"Remedy.Consumer.html","title":"Remedy.Consumer","type":"behaviour"},{"doc":"Callback used to handle events. Event event is a tuple describing the event. The tuple will include information in the following format: {event_name, {event_payload(s)}, WSState.t} For example, a message create will look like this {:MESSAGE_CREATE, {Remedy.Struct.Message.t}, WSState.t} In some cases there will be multiple payloads when something is updated, so as to include the new and the old versions. In the event of there being two payloads, the old payload will always be first, followed by the new payload. {:USER_UPDATE, {old_user :: Remedy.Struct.User.t, new_user :: Remedy.Struct.User.t}, WSState.t()} For a full listing of events, please see Remedy.Consumer.event/0 .","ref":"Remedy.Consumer.html#c:handle_event/1","title":"Remedy.Consumer.handle_event/1","type":"callback"},{"doc":"Starts a consumer process. mod is the name of the module where you define your event callbacks, which should probably be the current module which you can get with __MODULE__ . opts is a list of general process options. See Remedy.Consumer.options/0 for more info.","ref":"Remedy.Consumer.html#start_link/2","title":"Remedy.Consumer.start_link/2","type":"function"},{"doc":"","ref":"Remedy.Consumer.html#t:channel_create/0","title":"Remedy.Consumer.channel_create/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:channel_delete/0","title":"Remedy.Consumer.channel_delete/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:channel_pins_ack/0","title":"Remedy.Consumer.channel_pins_ack/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:channel_pins_update/0","title":"Remedy.Consumer.channel_pins_update/0","type":"type"},{"doc":"Dispatched when a channel is updated. old_channel will be nil when the pre-update channel could not be fetched from the cache.","ref":"Remedy.Consumer.html#t:channel_update/0","title":"Remedy.Consumer.channel_update/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:event/0","title":"Remedy.Consumer.event/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_available/0","title":"Remedy.Consumer.guild_available/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_ban_add/0","title":"Remedy.Consumer.guild_ban_add/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_ban_remove/0","title":"Remedy.Consumer.guild_ban_remove/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_create/0","title":"Remedy.Consumer.guild_create/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_delete/0","title":"Remedy.Consumer.guild_delete/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_emojis_update/0","title":"Remedy.Consumer.guild_emojis_update/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_integrations_update/0","title":"Remedy.Consumer.guild_integrations_update/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_member_add/0","title":"Remedy.Consumer.guild_member_add/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_member_remove/0","title":"Remedy.Consumer.guild_member_remove/0","type":"type"},{"doc":"Dispatched when a guild member is updated. old_member will be nil when the pre-update member could not be fetched from the cache.","ref":"Remedy.Consumer.html#t:guild_member_update/0","title":"Remedy.Consumer.guild_member_update/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_members_chunk/0","title":"Remedy.Consumer.guild_members_chunk/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_role_create/0","title":"Remedy.Consumer.guild_role_create/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_role_delete/0","title":"Remedy.Consumer.guild_role_delete/0","type":"type"},{"doc":"Dispatched when a role on a guild is updated. old_role will be nil when the pre-update role could not be fetched from the cache.","ref":"Remedy.Consumer.html#t:guild_role_update/0","title":"Remedy.Consumer.guild_role_update/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_unavailable/0","title":"Remedy.Consumer.guild_unavailable/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:guild_update/0","title":"Remedy.Consumer.guild_update/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:message_ack/0","title":"Remedy.Consumer.message_ack/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:message_create/0","title":"Remedy.Consumer.message_create/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:message_delete/0","title":"Remedy.Consumer.message_delete/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:message_delete_bulk/0","title":"Remedy.Consumer.message_delete_bulk/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:message_reaction_add/0","title":"Remedy.Consumer.message_reaction_add/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:message_reaction_remove/0","title":"Remedy.Consumer.message_reaction_remove/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:message_reaction_remove_all/0","title":"Remedy.Consumer.message_reaction_remove_all/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:message_reaction_remove_emoji/0","title":"Remedy.Consumer.message_reaction_remove_emoji/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:message_update/0","title":"Remedy.Consumer.message_update/0","type":"type"},{"doc":"General process options. The subscribe_to option should only be set if you want to use your own producer or producer consumer.","ref":"Remedy.Consumer.html#t:option/0","title":"Remedy.Consumer.option/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:options/0","title":"Remedy.Consumer.options/0","type":"type"},{"doc":"Dispatched when a user's presence is updated. old_presence will be nil when the pre-update presence could not be fetched from the cache.","ref":"Remedy.Consumer.html#t:presence_update/0","title":"Remedy.Consumer.presence_update/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:ready/0","title":"Remedy.Consumer.ready/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:resumed/0","title":"Remedy.Consumer.resumed/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:typing_start/0","title":"Remedy.Consumer.typing_start/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:user_settings_update/0","title":"Remedy.Consumer.user_settings_update/0","type":"type"},{"doc":"Dispatched when a user is updated. old_user will be nil when the pre-update user could not be fetched from the cache.","ref":"Remedy.Consumer.html#t:user_update/0","title":"Remedy.Consumer.user_update/0","type":"type"},{"doc":"Dispatched when the bot is ready to begin sending audio after joining a voice channel. Note that the third tuple element is of type VoiceWSState.t() instead of WSState.t().","ref":"Remedy.Consumer.html#t:voice_ready/0","title":"Remedy.Consumer.voice_ready/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:voice_server_update/0","title":"Remedy.Consumer.voice_server_update/0","type":"type"},{"doc":"Dispatched when the bot starts or stops speaking. Note that the third tuple element is of type VoiceWSState.t() instead of WSState.t().","ref":"Remedy.Consumer.html#t:voice_speaking_update/0","title":"Remedy.Consumer.voice_speaking_update/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:voice_state_update/0","title":"Remedy.Consumer.voice_state_update/0","type":"type"},{"doc":"","ref":"Remedy.Consumer.html#t:webhooks_update/0","title":"Remedy.Consumer.webhooks_update/0","type":"type"},{"doc":"Identify","ref":"Remedy.Gateway.Commands.Identify.html","title":"Remedy.Gateway.Commands.Identify","type":"module"},{"doc":"","ref":"Remedy.Gateway.Commands.Identify.html#build_payload/1","title":"Remedy.Gateway.Commands.Identify.build_payload/1","type":"function"},{"doc":"","ref":"Remedy.Gateway.Commands.Identify.html#changeset/1","title":"Remedy.Gateway.Commands.Identify.changeset/1","type":"function"},{"doc":"","ref":"Remedy.Gateway.Commands.Identify.html#changeset/2","title":"Remedy.Gateway.Commands.Identify.changeset/2","type":"function"},{"doc":"","ref":"Remedy.Gateway.Commands.Identify.html#command/0","title":"Remedy.Gateway.Commands.Identify.command/0","type":"function"},{"doc":"","ref":"Remedy.Gateway.Commands.Identify.html#payload/2","title":"Remedy.Gateway.Commands.Identify.payload/2","type":"function"},{"doc":"","ref":"Remedy.Gateway.Commands.Identify.html#validate/1","title":"Remedy.Gateway.Commands.Identify.validate/1","type":"function"},{"doc":"Functions that work on permissions. Some functions return a list of permissions. You can use enumerable functions to work with permissions: alias Remedy.Cache.GuildCache alias Remedy.Struct.Guild.Member guild = GuildCache.get!(279093381723062272) member = Map.get(guild.members, 177888205536886784) member_perms = Member.guild_permissions(member, guild) if :administrator in member_perms do IO.puts(&quot;This user has the administrator permission.&quot;) end","ref":"Remedy.Permission.html","title":"Remedy.Permission","type":"module"},{"doc":"Returns a list of all permissions.","ref":"Remedy.Permission.html#all/0","title":"Remedy.Permission.all/0","type":"function"},{"doc":"Converts the given bit to a permission. This function returns :error if bit does not map to a permission. Examples iex&gt; Remedy.Permission.from_bit(0x04000000) {:ok, :change_nickname} iex&gt; Remedy.Permission.from_bit(0) :error","ref":"Remedy.Permission.html#from_bit/1","title":"Remedy.Permission.from_bit/1","type":"function"},{"doc":"Same as from_bit/1 , but raises ArgumentError in case of failure. Examples iex&gt; Remedy.Permission.from_bit!(0x04000000) :change_nickname iex&gt; Remedy.Permission.from_bit!(0) ** (ArgumentError) expected a valid bit, got: `0`","ref":"Remedy.Permission.html#from_bit!/1","title":"Remedy.Permission.from_bit!/1","type":"function"},{"doc":"Converts the given bitset to a list of permissions. If invalid bits are given they will be omitted from the results. Examples iex&gt; Remedy.Permission.from_bitset(0x08000002) [:manage_nicknames, :kick_members] iex&gt; Remedy.Permission.from_bitset(0x4000000000000) []","ref":"Remedy.Permission.html#from_bitset/1","title":"Remedy.Permission.from_bitset/1","type":"function"},{"doc":"Returns true if term is a permission; otherwise returns false . Examples iex&gt; Remedy.Permission.is_permission(:administrator) true iex&gt; Remedy.Permission.is_permission(:not_a_permission) false","ref":"Remedy.Permission.html#is_permission/1","title":"Remedy.Permission.is_permission/1","type":"macro"},{"doc":"Converts the given permission to a bit. Examples iex&gt; Remedy.Permission.to_bit(:administrator) 8","ref":"Remedy.Permission.html#to_bit/1","title":"Remedy.Permission.to_bit/1","type":"function"},{"doc":"Converts the given enumerable of permissions to a bitset. Examples iex&gt; Remedy.Permission.to_bitset([:administrator, :create_instant_invite]) 9","ref":"Remedy.Permission.html#to_bitset/1","title":"Remedy.Permission.to_bitset/1","type":"function"},{"doc":"Represents a single permission as a bitvalue.","ref":"Remedy.Permission.html#t:bit/0","title":"Remedy.Permission.bit/0","type":"type"},{"doc":"Represents a set of permissions as a bitvalue.","ref":"Remedy.Permission.html#t:bitset/0","title":"Remedy.Permission.bitset/0","type":"type"},{"doc":"","ref":"Remedy.Permission.html#t:general_permission/0","title":"Remedy.Permission.general_permission/0","type":"type"},{"doc":"","ref":"Remedy.Permission.html#t:t/0","title":"Remedy.Permission.t/0","type":"type"},{"doc":"","ref":"Remedy.Permission.html#t:text_permission/0","title":"Remedy.Permission.text_permission/0","type":"type"},{"doc":"","ref":"Remedy.Permission.html#t:voice_permission/0","title":"Remedy.Permission.voice_permission/0","type":"type"},{"doc":"This is the center point between Commands, Interactions and Components. Should probably be the center point of any command framework","ref":"Remedy.Schema.InteractionData.html","title":"Remedy.Schema.InteractionData","type":"module"},{"doc":"","ref":"Remedy.Schema.InteractionData.html#changeset/1","title":"Remedy.Schema.InteractionData.changeset/1","type":"function"},{"doc":"","ref":"Remedy.Schema.InteractionData.html#changeset/2","title":"Remedy.Schema.InteractionData.changeset/2","type":"function"},{"doc":"","ref":"Remedy.Schema.InteractionData.html#new/1","title":"Remedy.Schema.InteractionData.new/1","type":"function"},{"doc":"","ref":"Remedy.Schema.InteractionData.html#validate/1","title":"Remedy.Schema.InteractionData.validate/1","type":"function"},{"doc":"Represents an update to channel pins.","ref":"Remedy.Struct.Event.ChannelPinsUpdate.html","title":"Remedy.Struct.Event.ChannelPinsUpdate","type":"module"},{"doc":"The ID of the channel","ref":"Remedy.Struct.Event.ChannelPinsUpdate.html#t:channel_id/0","title":"Remedy.Struct.Event.ChannelPinsUpdate.channel_id/0","type":"type"},{"doc":"The ID of the guild, if the pin update was on a guild","ref":"Remedy.Struct.Event.ChannelPinsUpdate.html#t:guild_id/0","title":"Remedy.Struct.Event.ChannelPinsUpdate.guild_id/0","type":"type"},{"doc":"The time at which the most recent pinned message was pinned","ref":"Remedy.Struct.Event.ChannelPinsUpdate.html#t:last_pin_timestamp/0","title":"Remedy.Struct.Event.ChannelPinsUpdate.last_pin_timestamp/0","type":"type"},{"doc":"Event sent when a message is pinned or unpinned in a text channel","ref":"Remedy.Struct.Event.ChannelPinsUpdate.html#t:t/0","title":"Remedy.Struct.Event.ChannelPinsUpdate.t/0","type":"type"},{"doc":"Sent when a user is banned from a guild","ref":"Remedy.Struct.Event.GuildBanAdd.html","title":"Remedy.Struct.Event.GuildBanAdd","type":"module"},{"doc":"ID of the guild","ref":"Remedy.Struct.Event.GuildBanAdd.html#t:guild_id/0","title":"Remedy.Struct.Event.GuildBanAdd.guild_id/0","type":"type"},{"doc":"Event sent when a user is banned from a guild","ref":"Remedy.Struct.Event.GuildBanAdd.html#t:t/0","title":"Remedy.Struct.Event.GuildBanAdd.t/0","type":"type"},{"doc":"Banned user","ref":"Remedy.Struct.Event.GuildBanAdd.html#t:user/0","title":"Remedy.Struct.Event.GuildBanAdd.user/0","type":"type"},{"doc":"Sent when a user is unbanned from a guild","ref":"Remedy.Struct.Event.GuildBanRemove.html","title":"Remedy.Struct.Event.GuildBanRemove","type":"module"},{"doc":"ID of the guild","ref":"Remedy.Struct.Event.GuildBanRemove.html#t:guild_id/0","title":"Remedy.Struct.Event.GuildBanRemove.guild_id/0","type":"type"},{"doc":"Event sent when a user is unbanned from a guild","ref":"Remedy.Struct.Event.GuildBanRemove.html#t:t/0","title":"Remedy.Struct.Event.GuildBanRemove.t/0","type":"type"},{"doc":"Unbanned user","ref":"Remedy.Struct.Event.GuildBanRemove.html#t:user/0","title":"Remedy.Struct.Event.GuildBanRemove.user/0","type":"type"},{"doc":"Sent when a guild integration is updated","ref":"Remedy.Struct.Event.GuildIntegrationsUpdate.html","title":"Remedy.Struct.Event.GuildIntegrationsUpdate","type":"module"},{"doc":"ID of the guild whose integrations were updated","ref":"Remedy.Struct.Event.GuildIntegrationsUpdate.html#t:guild_id/0","title":"Remedy.Struct.Event.GuildIntegrationsUpdate.guild_id/0","type":"type"},{"doc":"Event sent when a guild integration is updated","ref":"Remedy.Struct.Event.GuildIntegrationsUpdate.html#t:t/0","title":"Remedy.Struct.Event.GuildIntegrationsUpdate.t/0","type":"type"},{"doc":"Struct representing an Invite Create event","ref":"Remedy.Struct.Event.InviteCreate.html","title":"Remedy.Struct.Event.InviteCreate","type":"module"},{"doc":"Channel id of the channel this invite is for.","ref":"Remedy.Struct.Event.InviteCreate.html#t:channel_id/0","title":"Remedy.Struct.Event.InviteCreate.channel_id/0","type":"type"},{"doc":"The unique invite code.","ref":"Remedy.Struct.Event.InviteCreate.html#t:code/0","title":"Remedy.Struct.Event.InviteCreate.code/0","type":"type"},{"doc":"The time at which the invite was created.","ref":"Remedy.Struct.Event.InviteCreate.html#t:created_at/0","title":"Remedy.Struct.Event.InviteCreate.created_at/0","type":"type"},{"doc":"Guild id of the guild this invite is for.","ref":"Remedy.Struct.Event.InviteCreate.html#t:guild_id/0","title":"Remedy.Struct.Event.InviteCreate.guild_id/0","type":"type"},{"doc":"The user that created the invite.","ref":"Remedy.Struct.Event.InviteCreate.html#t:inviter/0","title":"Remedy.Struct.Event.InviteCreate.inviter/0","type":"type"},{"doc":"Duration (in seconds) after which the invite expires.","ref":"Remedy.Struct.Event.InviteCreate.html#t:max_age/0","title":"Remedy.Struct.Event.InviteCreate.max_age/0","type":"type"},{"doc":"Max number of times this invite can be used.","ref":"Remedy.Struct.Event.InviteCreate.html#t:max_uses/0","title":"Remedy.Struct.Event.InviteCreate.max_uses/0","type":"type"},{"doc":"","ref":"Remedy.Struct.Event.InviteCreate.html#t:t/0","title":"Remedy.Struct.Event.InviteCreate.t/0","type":"type"},{"doc":"Partially populated user struct of the target user for this invite.","ref":"Remedy.Struct.Event.InviteCreate.html#t:target_user/0","title":"Remedy.Struct.Event.InviteCreate.target_user/0","type":"type"},{"doc":"The type of user target for this invite.","ref":"Remedy.Struct.Event.InviteCreate.html#t:target_user_type/0","title":"Remedy.Struct.Event.InviteCreate.target_user_type/0","type":"type"},{"doc":"Whether this invite only grants temporary membership.","ref":"Remedy.Struct.Event.InviteCreate.html#t:temporary/0","title":"Remedy.Struct.Event.InviteCreate.temporary/0","type":"type"},{"doc":"Number of times this invite has been used.","ref":"Remedy.Struct.Event.InviteCreate.html#t:uses/0","title":"Remedy.Struct.Event.InviteCreate.uses/0","type":"type"},{"doc":"Struct representing an Invite Delete event","ref":"Remedy.Struct.Event.InviteDelete.html","title":"Remedy.Struct.Event.InviteDelete","type":"module"},{"doc":"Channel id of the channel this invite is for.","ref":"Remedy.Struct.Event.InviteDelete.html#t:channel_id/0","title":"Remedy.Struct.Event.InviteDelete.channel_id/0","type":"type"},{"doc":"The unique invite code.","ref":"Remedy.Struct.Event.InviteDelete.html#t:code/0","title":"Remedy.Struct.Event.InviteDelete.code/0","type":"type"},{"doc":"Guild id of the guild this invite is for.","ref":"Remedy.Struct.Event.InviteDelete.html#t:guild_id/0","title":"Remedy.Struct.Event.InviteDelete.guild_id/0","type":"type"},{"doc":"","ref":"Remedy.Struct.Event.InviteDelete.html#t:t/0","title":"Remedy.Struct.Event.InviteDelete.t/0","type":"type"},{"doc":"Struct representing a Message Delete event","ref":"Remedy.Struct.Event.MessageDelete.html","title":"Remedy.Struct.Event.MessageDelete","type":"module"},{"doc":"Channel id of the deleted message","ref":"Remedy.Struct.Event.MessageDelete.html#t:channel_id/0","title":"Remedy.Struct.Event.MessageDelete.channel_id/0","type":"type"},{"doc":"Guild id of the deleted message nil if a non-guild message was deleted.","ref":"Remedy.Struct.Event.MessageDelete.html#t:guild_id/0","title":"Remedy.Struct.Event.MessageDelete.guild_id/0","type":"type"},{"doc":"Id of the deleted message","ref":"Remedy.Struct.Event.MessageDelete.html#t:id/0","title":"Remedy.Struct.Event.MessageDelete.id/0","type":"type"},{"doc":"","ref":"Remedy.Struct.Event.MessageDelete.html#t:t/0","title":"Remedy.Struct.Event.MessageDelete.t/0","type":"type"},{"doc":"Struct representing a Message Delete Bulk event","ref":"Remedy.Struct.Event.MessageDeleteBulk.html","title":"Remedy.Struct.Event.MessageDeleteBulk","type":"module"},{"doc":"Channel id of the deleted message","ref":"Remedy.Struct.Event.MessageDeleteBulk.html#t:channel_id/0","title":"Remedy.Struct.Event.MessageDeleteBulk.channel_id/0","type":"type"},{"doc":"Guild id of the deleted message nil if a non-guild message was deleted.","ref":"Remedy.Struct.Event.MessageDeleteBulk.html#t:guild_id/0","title":"Remedy.Struct.Event.MessageDeleteBulk.guild_id/0","type":"type"},{"doc":"Ids of the deleted messages","ref":"Remedy.Struct.Event.MessageDeleteBulk.html#t:ids/0","title":"Remedy.Struct.Event.MessageDeleteBulk.ids/0","type":"type"},{"doc":"","ref":"Remedy.Struct.Event.MessageDeleteBulk.html#t:t/0","title":"Remedy.Struct.Event.MessageDeleteBulk.t/0","type":"type"},{"doc":"Sent when a user adds a reaction to a message","ref":"Remedy.Struct.Event.MessageReactionAdd.html","title":"Remedy.Struct.Event.MessageReactionAdd","type":"module"},{"doc":"Channel in which the reaction was added","ref":"Remedy.Struct.Event.MessageReactionAdd.html#t:channel_id/0","title":"Remedy.Struct.Event.MessageReactionAdd.channel_id/0","type":"type"},{"doc":"The (partial) emoji used to react","ref":"Remedy.Struct.Event.MessageReactionAdd.html#t:emoji/0","title":"Remedy.Struct.Event.MessageReactionAdd.emoji/0","type":"type"},{"doc":"Guild ID in which the reaction was added, if applicable","ref":"Remedy.Struct.Event.MessageReactionAdd.html#t:guild_id/0","title":"Remedy.Struct.Event.MessageReactionAdd.guild_id/0","type":"type"},{"doc":"The member who reacted, if this happened on a guild","ref":"Remedy.Struct.Event.MessageReactionAdd.html#t:member/0","title":"Remedy.Struct.Event.MessageReactionAdd.member/0","type":"type"},{"doc":"Message to which the reaction was added","ref":"Remedy.Struct.Event.MessageReactionAdd.html#t:message_id/0","title":"Remedy.Struct.Event.MessageReactionAdd.message_id/0","type":"type"},{"doc":"Event sent when a user adds a reaction to a message","ref":"Remedy.Struct.Event.MessageReactionAdd.html#t:t/0","title":"Remedy.Struct.Event.MessageReactionAdd.t/0","type":"type"},{"doc":"ID of the user who added the reaction","ref":"Remedy.Struct.Event.MessageReactionAdd.html#t:user_id/0","title":"Remedy.Struct.Event.MessageReactionAdd.user_id/0","type":"type"},{"doc":"Sent when a user removes a reaction from a message","ref":"Remedy.Struct.Event.MessageReactionRemove.html","title":"Remedy.Struct.Event.MessageReactionRemove","type":"module"},{"doc":"ID of the channel in which the reaction was created","ref":"Remedy.Struct.Event.MessageReactionRemove.html#t:channel_id/0","title":"Remedy.Struct.Event.MessageReactionRemove.channel_id/0","type":"type"},{"doc":"Partial emoji object that was removed","ref":"Remedy.Struct.Event.MessageReactionRemove.html#t:emoji/0","title":"Remedy.Struct.Event.MessageReactionRemove.emoji/0","type":"type"},{"doc":"ID of the guild on which the message lives, if applicable","ref":"Remedy.Struct.Event.MessageReactionRemove.html#t:guild_id/0","title":"Remedy.Struct.Event.MessageReactionRemove.guild_id/0","type":"type"},{"doc":"ID of the message to which the reaction was attached","ref":"Remedy.Struct.Event.MessageReactionRemove.html#t:message_id/0","title":"Remedy.Struct.Event.MessageReactionRemove.message_id/0","type":"type"},{"doc":"Event sent when a user removes a reaction from a message","ref":"Remedy.Struct.Event.MessageReactionRemove.html#t:t/0","title":"Remedy.Struct.Event.MessageReactionRemove.t/0","type":"type"},{"doc":"Author of the reaction","ref":"Remedy.Struct.Event.MessageReactionRemove.html#t:user_id/0","title":"Remedy.Struct.Event.MessageReactionRemove.user_id/0","type":"type"},{"doc":"Sent when a user explicitly removes all reactions from a message","ref":"Remedy.Struct.Event.MessageReactionRemoveAll.html","title":"Remedy.Struct.Event.MessageReactionRemoveAll","type":"module"},{"doc":"ID of the channel in which the message resides.","ref":"Remedy.Struct.Event.MessageReactionRemoveAll.html#t:channel_id/0","title":"Remedy.Struct.Event.MessageReactionRemoveAll.channel_id/0","type":"type"},{"doc":"ID of the guild for the message, if applicable.","ref":"Remedy.Struct.Event.MessageReactionRemoveAll.html#t:guild_id/0","title":"Remedy.Struct.Event.MessageReactionRemoveAll.guild_id/0","type":"type"},{"doc":"ID of the message from which all reactions were removed.","ref":"Remedy.Struct.Event.MessageReactionRemoveAll.html#t:message_id/0","title":"Remedy.Struct.Event.MessageReactionRemoveAll.message_id/0","type":"type"},{"doc":"Event sent when a user explicitly removes all reactions from a message","ref":"Remedy.Struct.Event.MessageReactionRemoveAll.html#t:t/0","title":"Remedy.Struct.Event.MessageReactionRemoveAll.t/0","type":"type"},{"doc":"Sent when a bot removes all instances of a given emoji from the reactions of a message","ref":"Remedy.Struct.Event.MessageReactionRemoveEmoji.html","title":"Remedy.Struct.Event.MessageReactionRemoveEmoji","type":"module"},{"doc":"Channel in which the message resides.","ref":"Remedy.Struct.Event.MessageReactionRemoveEmoji.html#t:channel_id/0","title":"Remedy.Struct.Event.MessageReactionRemoveEmoji.channel_id/0","type":"type"},{"doc":"The (partial) emoji that was removed.","ref":"Remedy.Struct.Event.MessageReactionRemoveEmoji.html#t:emoji/0","title":"Remedy.Struct.Event.MessageReactionRemoveEmoji.emoji/0","type":"type"},{"doc":"Guild on which the message resides, if applicable.","ref":"Remedy.Struct.Event.MessageReactionRemoveEmoji.html#t:guild_id/0","title":"Remedy.Struct.Event.MessageReactionRemoveEmoji.guild_id/0","type":"type"},{"doc":"Message from which the emoji was removed.","ref":"Remedy.Struct.Event.MessageReactionRemoveEmoji.html#t:message_id/0","title":"Remedy.Struct.Event.MessageReactionRemoveEmoji.message_id/0","type":"type"},{"doc":"Event sent when a bot removes all instances of a given emoji from the reactions of a message","ref":"Remedy.Struct.Event.MessageReactionRemoveEmoji.html#t:t/0","title":"Remedy.Struct.Event.MessageReactionRemoveEmoji.t/0","type":"type"},{"doc":"Sent on READY","ref":"Remedy.Struct.Event.PartialApplication.html","title":"Remedy.Struct.Event.PartialApplication","type":"module"},{"doc":"Public flags of the application. See https://discord.com/developers/docs/resources/application#application-object-application-flags","ref":"Remedy.Struct.Event.PartialApplication.html#t:flags/0","title":"Remedy.Struct.Event.PartialApplication.flags/0","type":"type"},{"doc":"ID of the application","ref":"Remedy.Struct.Event.PartialApplication.html#t:id/0","title":"Remedy.Struct.Event.PartialApplication.id/0","type":"type"},{"doc":"Event sent as part of the READY payload.","ref":"Remedy.Struct.Event.PartialApplication.html#t:t/0","title":"Remedy.Struct.Event.PartialApplication.t/0","type":"type"},{"doc":"Sent after initial handshake with the gateway","ref":"Remedy.Struct.Event.Ready.html","title":"Remedy.Struct.Event.Ready","type":"module"},{"doc":"Partial application object with id and flags","ref":"Remedy.Struct.Event.Ready.html#t:application/0","title":"Remedy.Struct.Event.Ready.application/0","type":"type"},{"doc":"The guilds that the bot user is in","ref":"Remedy.Struct.Event.Ready.html#t:guilds/0","title":"Remedy.Struct.Event.Ready.guilds/0","type":"type"},{"doc":"Used for resuming connections. If you are wondering whether you need to use this, you probably don't. Remedy handles reconnections for you.","ref":"Remedy.Struct.Event.Ready.html#t:session_id/0","title":"Remedy.Struct.Event.Ready.session_id/0","type":"type"},{"doc":"A pair of two integers {shard_id, num_shards} . For more information, see https://discord.com/developers/docs/topics/gateway#sharding.","ref":"Remedy.Struct.Event.Ready.html#t:shard/0","title":"Remedy.Struct.Event.Ready.shard/0","type":"type"},{"doc":"Event sent after initial handshake with the gateway","ref":"Remedy.Struct.Event.Ready.html#t:t/0","title":"Remedy.Struct.Event.Ready.t/0","type":"type"},{"doc":"Information about the bot user","ref":"Remedy.Struct.Event.Ready.html#t:user/0","title":"Remedy.Struct.Event.Ready.user/0","type":"type"},{"doc":"Gateway version. See https://discord.com/developers/docs/topics/gateway#gateways-gateway-versions","ref":"Remedy.Struct.Event.Ready.html#t:v/0","title":"Remedy.Struct.Event.Ready.v/0","type":"type"},{"doc":"Struct representing a Remedy-generated Speaking Update event Remedy will generate this event when the bot starts or stops playing audio.","ref":"Remedy.Struct.Event.SpeakingUpdate.html","title":"Remedy.Struct.Event.SpeakingUpdate","type":"module"},{"doc":"Id of the channel this speaking update is occurring in.","ref":"Remedy.Struct.Event.SpeakingUpdate.html#t:channel_id/0","title":"Remedy.Struct.Event.SpeakingUpdate.channel_id/0","type":"type"},{"doc":"Id of the guild this speaking update is occurring in.","ref":"Remedy.Struct.Event.SpeakingUpdate.html#t:guild_id/0","title":"Remedy.Struct.Event.SpeakingUpdate.guild_id/0","type":"type"},{"doc":"Boolean representing if bot has started or stopped speaking.","ref":"Remedy.Struct.Event.SpeakingUpdate.html#t:speaking/0","title":"Remedy.Struct.Event.SpeakingUpdate.speaking/0","type":"type"},{"doc":"","ref":"Remedy.Struct.Event.SpeakingUpdate.html#t:t/0","title":"Remedy.Struct.Event.SpeakingUpdate.t/0","type":"type"},{"doc":"Boolean representing if speaking update was caused by an audio timeout.","ref":"Remedy.Struct.Event.SpeakingUpdate.html#t:timed_out/0","title":"Remedy.Struct.Event.SpeakingUpdate.timed_out/0","type":"type"},{"doc":"Sent when a user starts typing in a channel","ref":"Remedy.Struct.Event.TypingStart.html","title":"Remedy.Struct.Event.TypingStart","type":"module"},{"doc":"Channel in which the user started typing","ref":"Remedy.Struct.Event.TypingStart.html#t:channel_id/0","title":"Remedy.Struct.Event.TypingStart.channel_id/0","type":"type"},{"doc":"ID of the guild where the user started typing, if applicable","ref":"Remedy.Struct.Event.TypingStart.html#t:guild_id/0","title":"Remedy.Struct.Event.TypingStart.guild_id/0","type":"type"},{"doc":"The member who started typing if this happened in a guild","ref":"Remedy.Struct.Event.TypingStart.html#t:member/0","title":"Remedy.Struct.Event.TypingStart.member/0","type":"type"},{"doc":"Event sent when a user starts typing in a channel","ref":"Remedy.Struct.Event.TypingStart.html#t:t/0","title":"Remedy.Struct.Event.TypingStart.t/0","type":"type"},{"doc":"Unix time (in seconds) of when the user started typing","ref":"Remedy.Struct.Event.TypingStart.html#t:timestamp/0","title":"Remedy.Struct.Event.TypingStart.timestamp/0","type":"type"},{"doc":"ID of the user who started typing","ref":"Remedy.Struct.Event.TypingStart.html#t:user_id/0","title":"Remedy.Struct.Event.TypingStart.user_id/0","type":"type"},{"doc":"Struct representing a Remedy-generated Voice Ready event Remedy will generate this event when the bot joins a voice channel and is ready to play audio. Listening to this event may be used for bots that begin playing audio directly after joining a voice channel as an alternative to waiting until Remedy.Voice.ready?/1 returns true .","ref":"Remedy.Struct.Event.VoiceReady.html","title":"Remedy.Struct.Event.VoiceReady","type":"module"},{"doc":"Id of the channel that voice is ready in.","ref":"Remedy.Struct.Event.VoiceReady.html#t:channel_id/0","title":"Remedy.Struct.Event.VoiceReady.channel_id/0","type":"type"},{"doc":"Id of the guild that voice is ready in.","ref":"Remedy.Struct.Event.VoiceReady.html#t:guild_id/0","title":"Remedy.Struct.Event.VoiceReady.guild_id/0","type":"type"},{"doc":"","ref":"Remedy.Struct.Event.VoiceReady.html#t:t/0","title":"Remedy.Struct.Event.VoiceReady.t/0","type":"type"},{"doc":"Sent when a guild's voice server is updated","ref":"Remedy.Struct.Event.VoiceServerUpdate.html","title":"Remedy.Struct.Event.VoiceServerUpdate","type":"module"},{"doc":"The voice server host","ref":"Remedy.Struct.Event.VoiceServerUpdate.html#t:endpoint/0","title":"Remedy.Struct.Event.VoiceServerUpdate.endpoint/0","type":"type"},{"doc":"Guild this voice server update is for","ref":"Remedy.Struct.Event.VoiceServerUpdate.html#t:guild_id/0","title":"Remedy.Struct.Event.VoiceServerUpdate.guild_id/0","type":"type"},{"doc":"Event sent when a guild's voice server is updated","ref":"Remedy.Struct.Event.VoiceServerUpdate.html#t:t/0","title":"Remedy.Struct.Event.VoiceServerUpdate.t/0","type":"type"},{"doc":"Voice connection token","ref":"Remedy.Struct.Event.VoiceServerUpdate.html#t:token/0","title":"Remedy.Struct.Event.VoiceServerUpdate.token/0","type":"type"},{"doc":"Represents a user's voice connection status","ref":"Remedy.Struct.Event.VoiceState.html","title":"Remedy.Struct.Event.VoiceState","type":"module"},{"doc":"Channel ID this voice state is for","ref":"Remedy.Struct.Event.VoiceState.html#t:channel_id/0","title":"Remedy.Struct.Event.VoiceState.channel_id/0","type":"type"},{"doc":"Whether this user is deafened by the server","ref":"Remedy.Struct.Event.VoiceState.html#t:deaf?/0","title":"Remedy.Struct.Event.VoiceState.deaf?/0","type":"type"},{"doc":"Guild ID this voice state is for, if applicable","ref":"Remedy.Struct.Event.VoiceState.html#t:guild_id/0","title":"Remedy.Struct.Event.VoiceState.guild_id/0","type":"type"},{"doc":"Guild member this voice state is for, if applicable","ref":"Remedy.Struct.Event.VoiceState.html#t:member/0","title":"Remedy.Struct.Event.VoiceState.member/0","type":"type"},{"doc":"Whether this user is muteened by the server","ref":"Remedy.Struct.Event.VoiceState.html#t:mute?/0","title":"Remedy.Struct.Event.VoiceState.mute?/0","type":"type"},{"doc":"Time at which the user requested to speak, if applicable","ref":"Remedy.Struct.Event.VoiceState.html#t:request_to_speak_timestamp/0","title":"Remedy.Struct.Event.VoiceState.request_to_speak_timestamp/0","type":"type"},{"doc":"Whether this user is locally deafened","ref":"Remedy.Struct.Event.VoiceState.html#t:self_deaf?/0","title":"Remedy.Struct.Event.VoiceState.self_deaf?/0","type":"type"},{"doc":"Whether this user is locally muted","ref":"Remedy.Struct.Event.VoiceState.html#t:self_mute?/0","title":"Remedy.Struct.Event.VoiceState.self_mute?/0","type":"type"},{"doc":"Whether the user is streaming using &quot;Go Live&quot;","ref":"Remedy.Struct.Event.VoiceState.html#t:self_stream?/0","title":"Remedy.Struct.Event.VoiceState.self_stream?/0","type":"type"},{"doc":"Whether this user's camera is enabled","ref":"Remedy.Struct.Event.VoiceState.html#t:self_video?/0","title":"Remedy.Struct.Event.VoiceState.self_video?/0","type":"type"},{"doc":"Session ID for this voice state","ref":"Remedy.Struct.Event.VoiceState.html#t:session_id/0","title":"Remedy.Struct.Event.VoiceState.session_id/0","type":"type"},{"doc":"Whether this user is muted by the current user","ref":"Remedy.Struct.Event.VoiceState.html#t:suppress?/0","title":"Remedy.Struct.Event.VoiceState.suppress?/0","type":"type"},{"doc":"Event sent when a user's voice status is updated","ref":"Remedy.Struct.Event.VoiceState.html#t:t/0","title":"Remedy.Struct.Event.VoiceState.t/0","type":"type"},{"doc":"User this voice state is for","ref":"Remedy.Struct.Event.VoiceState.html#t:user_id/0","title":"Remedy.Struct.Event.VoiceState.user_id/0","type":"type"},{"doc":"Struct representing the current Voice WS state.","ref":"Remedy.Struct.VoiceWSState.html","title":"Remedy.Struct.VoiceWSState","type":"module"},{"doc":"PID of the :gun worker connected to the websocket","ref":"Remedy.Struct.VoiceWSState.html#t:conn/0","title":"Remedy.Struct.VoiceWSState.conn/0","type":"type"},{"doc":"PID of the connection process","ref":"Remedy.Struct.VoiceWSState.html#t:conn_pid/0","title":"Remedy.Struct.VoiceWSState.conn_pid/0","type":"type"},{"doc":"Gateway URL","ref":"Remedy.Struct.VoiceWSState.html#t:gateway/0","title":"Remedy.Struct.VoiceWSState.gateway/0","type":"type"},{"doc":"The guild id that this voice websocket state applies to","ref":"Remedy.Struct.VoiceWSState.html#t:guild_id/0","title":"Remedy.Struct.VoiceWSState.guild_id/0","type":"type"},{"doc":"Whether or not the last hearbeat sent was ACK'd","ref":"Remedy.Struct.VoiceWSState.html#t:heartbeat_ack/0","title":"Remedy.Struct.VoiceWSState.heartbeat_ack/0","type":"type"},{"doc":"Interval at which heartbeats are sent","ref":"Remedy.Struct.VoiceWSState.html#t:heartbeat_interval/0","title":"Remedy.Struct.VoiceWSState.heartbeat_interval/0","type":"type"},{"doc":"Time ref for the heartbeat","ref":"Remedy.Struct.VoiceWSState.html#t:heartbeat_ref/0","title":"Remedy.Struct.VoiceWSState.heartbeat_ref/0","type":"type"},{"doc":"Whether the session has been identified","ref":"Remedy.Struct.VoiceWSState.html#t:identified/0","title":"Remedy.Struct.VoiceWSState.identified/0","type":"type"},{"doc":"The time the last heartbeat was acknowledged, will be nil if a heartbeat hasn't been ACK'd yet","ref":"Remedy.Struct.VoiceWSState.html#t:last_heartbeat_ack/0","title":"Remedy.Struct.VoiceWSState.last_heartbeat_ack/0","type":"type"},{"doc":"The time the last heartbeat was sent, if a heartbeat hasn't been sent it will be the time the websocket process was started","ref":"Remedy.Struct.VoiceWSState.html#t:last_heartbeat_send/0","title":"Remedy.Struct.VoiceWSState.last_heartbeat_send/0","type":"type"},{"doc":"The session id","ref":"Remedy.Struct.VoiceWSState.html#t:session/0","title":"Remedy.Struct.VoiceWSState.session/0","type":"type"},{"doc":"Stream reference for :gun","ref":"Remedy.Struct.VoiceWSState.html#t:stream/0","title":"Remedy.Struct.VoiceWSState.stream/0","type":"type"},{"doc":"","ref":"Remedy.Struct.VoiceWSState.html#t:t/0","title":"Remedy.Struct.VoiceWSState.t/0","type":"type"},{"doc":"The session token","ref":"Remedy.Struct.VoiceWSState.html#t:token/0","title":"Remedy.Struct.VoiceWSState.token/0","type":"type"},{"doc":"Utility functions","ref":"Remedy.Util.html","title":"Remedy.Util","type":"module"},{"doc":"","ref":"Remedy.Util.html#enum_to_struct/2","title":"Remedy.Util.enum_to_struct/2","type":"function"},{"doc":"Returns the gateway url and shard count for current websocket connections. If by chance no gateway connection has been made, will fetch the url to use and store it for future use.","ref":"Remedy.Util.html#gateway/0","title":"Remedy.Util.gateway/0","type":"function"},{"doc":"Gets the latencies of all shard connections. Calls get_shard_latency/1 on all shards and returns a map whose keys are shard nums and whose values are latencies in milliseconds.","ref":"Remedy.Util.html#get_all_shard_latencies/0","title":"Remedy.Util.get_all_shard_latencies/0","type":"function"},{"doc":"Attempts to convert a string to an atom. Binary token s that consist of digits are assumed to be snowflakes, and will be parsed as such. If atom does not currently exist, will warn that we're doing an unsafe conversion.","ref":"Remedy.Util.html#maybe_to_atom/1","title":"Remedy.Util.maybe_to_atom/1","type":"function"},{"doc":"Returns the number of milliseconds since unix epoch.","ref":"Remedy.Util.html#now/0","title":"Remedy.Util.now/0","type":"function"},{"doc":"Returns the current date as an ISO formatted string.","ref":"Remedy.Util.html#now_iso/0","title":"Remedy.Util.now_iso/0","type":"function"},{"doc":"Returns the number of shards. This is not the number of currently active shards, but the number of shards specified in your config.","ref":"Remedy.Util.html#num_shards/0","title":"Remedy.Util.num_shards/0","type":"function"},{"doc":"Helper for defining all the methods used for struct and encoding transformations. Example Remedy.Util.remedy_struct(%{ author: User, mentions: [User], mention_roles: [User], embeds: [Embed] })","ref":"Remedy.Util.html#remedy_struct/1","title":"Remedy.Util.remedy_struct/1","type":"macro"},{"doc":"Converts a map into an atom-keyed map. Given a map with variable type keys, returns the same map with all keys as atoms . To support maps keyed with integers (such as in Discord's interaction data), binaries that appear to be integers will be parsed as such. This function will attempt to convert keys to an existing atom, and if that fails will default to creating a new atom while displaying a warning. The idea here is that we should be able to see if any results from Discord are giving variable keys. Since we will define all types of objects returned by Discord, the amount of new atoms created SHOULD be 0. 👀","ref":"Remedy.Util.html#safe_atom_map/1","title":"Remedy.Util.safe_atom_map/1","type":"function"},{"doc":"Since we're being sacrilegious and converting strings to atoms from the WS, there will be some atoms that we see that aren't defined in any Discord structs. This method mainly serves as a means to define those atoms once so the user isn't warned about them in the Remedy.Util.maybe_to_atom/1 function when they are in fact harmless.","ref":"Remedy.Util.html#unused_atoms/0","title":"Remedy.Util.unused_atoms/0","type":"function"},{"doc":"Returns the number of microseconds since unix epoch.","ref":"Remedy.Util.html#usec_now/0","title":"Remedy.Util.usec_now/0","type":"function"},{"doc":"Interface for playing audio through Discord's voice channels. Using Discord Voice Channels To play sound in Discord with Remedy, you'll need ffmpeg to be installed. If you don't have the executable ffmpeg in the path, the absolute path may be configured through config keys :remedy, :ffmpeg . If you don't want to use ffmpeg, read on to the next section. A bot may be connected to at most one voice channel per guild. For this reason, most of the functions in this module take a guild id, and the resulting action will be performed in the given guild's voice channel that the bot is connected to. The primary Discord gateway responsible for all text based communication relies on one websocket connection per shard, where small bots typically only have one shard. The Discord voice gateways work by establishing a websocket connection per guild/channel. After some handshaking on this connection, audio data can be sent over UDP/RTP. Behind the scenes the voice websocket connections are implemented nearly the same way the main shard websocket connections are, and require no developer intervention. Voice Without FFmpeg If you wish to BYOE (Bring Your Own Encoder), there are a few options. Use :raw as type for Remedy.Voice.play/4 Provide the complete list of opus frames as the input Use :raw_s as type for Remedy.Voice.play/4 Provide a stateful enumerable of opus frames as input (think GenServer wrapped in Stream.unfold/2 ) Use lower level functions to send opus frames at your leisure Send packets on your own time using Remedy.Voice.send_frames/2","ref":"Remedy.Voice.html","title":"Remedy.Voice","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Remedy.Voice.html#child_spec/1","title":"Remedy.Voice.child_spec/1","type":"function"},{"doc":"Low-level. Manually connect to voice websockets gateway. This function should only be called if config option :voice_auto_connect is set to false . By default Remedy will automatically create a voice gateway when joining a channel.","ref":"Remedy.Voice.html#connect_to_gateway/1","title":"Remedy.Voice.connect_to_gateway/1","type":"function"},{"doc":"Gets the id of the voice channel that the bot is connected to. Parameters guild_id - ID of guild that the resultant channel belongs to. Returns the channel_id for the channel the bot is connected to, otherwise nil . Examples iex&gt; Remedy.Voice.join_channel(123456789, 420691337) iex&gt; Remedy.Voice.get_channel(123456789) 420691337 iex&gt; Remedy.Voice.leave_channel(123456789) iex&gt; Remedy.Voice.get_channel(123456789) nil","ref":"Remedy.Voice.html#get_channel_id/1","title":"Remedy.Voice.get_channel_id/1","type":"function"},{"doc":"Joins or moves the bot to a voice channel. This function is equivalent to Remedy.Api.update_voice_state/4 .","ref":"Remedy.Voice.html#join_channel/4","title":"Remedy.Voice.join_channel/4","type":"function"},{"doc":"Leaves the voice channel of the given guild id. This function is equivalent to calling Remedy.Api.update_voice_state(guild_id, nil) .","ref":"Remedy.Voice.html#leave_channel/1","title":"Remedy.Voice.leave_channel/1","type":"function"},{"doc":"Listen for incoming voice RTP packets. Parameters guild_id - ID of guild that the bot is listening to. num_packets - Number of packets to wait for. Returns a list of 2-element tuples in the form {rtp_header, opus_frame} . This function will block until the specified number of packets is received.","ref":"Remedy.Voice.html#listen/2","title":"Remedy.Voice.listen/2","type":"function"},{"doc":"Pauses the current sound being played in a voice channel. The bot must be connected to a voice channel in the guild specified. Parameters guild_id - ID of guild whose voice channel the sound will be paused in. Returns {:error, reason} if unable to pause or no sound is playing, else :ok . This function is similar to stop/1 , except that the sound may be resumed after being paused. Examples iex&gt; Remedy.Voice.join_channel(123456789, 420691337) iex&gt; Remedy.Voice.play(123456789, &quot;~/files/twelve_hour_loop_of_waterfall_sounds.mp3&quot;) iex&gt; Remedy.Voice.pause(123456789)","ref":"Remedy.Voice.html#pause/1","title":"Remedy.Voice.pause/1","type":"function"},{"doc":"Plays sound in the voice channel the bot is in. The bot must be connected to a voice channel in the guild specified. Parameters guild_id - ID of guild whose voice channel the sound will be played in. input - Audio to be played. Type of input determined by type parameter. type - Type of input (defaults to :url ). :url Input will be any url that ffmpeg can read . :pipe Input will be data that is piped to stdin of ffmpeg . :ytdl Input will be url for youtube-dl , which gets automatically piped to ffmpeg . :stream Input will be livestream url for streamlink , which gets automatically piped to ffmpeg . :raw Input will be an enumarable of raw opus frames. This bypasses ffmpeg and all options. :raw_s Same as :raw but input must be stateful, i.e. calling Enum.take/2 on input is not idempotent. options - See options section below. Returns {:error, reason} if unable to play or a sound is playing, else :ok . Options :start_pos (string) - The start position of the audio to be played. Defaults to beginning. :duration (string) - The duration to of the audio to be played . Defaults to entire duration. :realtime (boolean) - Make ffmpeg process the input in realtime instead of as fast as possible. Defaults to true. :volume (number) - The output volume of the audio. Default volume is 1.0. :filter (string) - Filter(s) to be applied to the audio. No filters applied by default. The values of :start_pos and :duration can be any time duration that ffmpeg can read . The :filter can be used multiple times in a single call (see examples). The values of :filter can be any audio filters that ffmpeg can read . Filters will be applied in order and can be as complex as you want. The world is your oyster! Note that using the :volume option is shortcut for the &quot;volume&quot; filter, and will be added to the end of the filter chain, acting as a master volume. Volume values between 0.0 and 1.0 act as standard oparating range where 0 is off and 1 is max. Values greater than 1.0 will add saturation and distortion to the audio. Negative values act the same as their position but reverse the polarity of the waveform. Having all the ffmpeg audio filters available is extremely powerful so it may be worth learning some of them for your use cases. If you use any filters to increase the playback speed of your audio, it's recommended to set the :realtime option to false because realtime processing is relative to the original playback speed. Examples iex&gt; Remedy.Voice.join_channel(123456789, 420691337) iex&gt; Remedy.Voice.play(123456789, &quot;~/music/FavoriteSong.mp3&quot;, :url) iex&gt; Remedy.Voice.play(123456789, &quot;~/music/NotFavoriteButStillGoodSong.mp3&quot;, :url, volume: 0.5) iex&gt; Remedy.Voice.play(123456789, &quot;~/music/ThisWillBeHeavilyDistorted.mp3&quot;, :url, volume: 1000) iex&gt; Remedy.Voice.join_channel(123456789, 420691337) iex&gt; raw_data = File.read!(&quot;~/music/sound_effect.wav&quot;) iex&gt; Remedy.Voice.play(123456789, raw_data, :pipe) iex&gt; Remedy.Voice.join_channel(123456789, 420691337) iex&gt; Remedy.Voice.play(123456789, &quot;https://www.youtube.com/watch?v=b4RJ-QGOtw4&quot;, :ytdl, ...&gt; realtime: true, start_pos: &quot;0:17&quot;, duration: &quot;30&quot;) iex&gt; Remedy.Voice.play(123456789, &quot;https://www.youtube.com/watch?v=0ngcL_5ekXo&quot;, :ytdl, ...&gt; filter: &quot;lowpass=f=1200&quot;, filter: &quot;highpass=f=300&quot;, filter: &quot;asetrate=44100*0.5&quot;) iex&gt; Remedy.Voice.join_channel(123456789, 420691337) iex&gt; Remedy.Voice.play(123456789, &quot;https://www.twitch.tv/pestily&quot;, :stream) iex&gt; Remedy.Voice.play(123456789, &quot;https://youtu.be/LN4r-K8ZP5Q&quot;, :stream)","ref":"Remedy.Voice.html#play/4","title":"Remedy.Voice.play/4","type":"function"},{"doc":"Checks if the bot is playing sound in a voice channel. Parameters guild_id - ID of guild to check if audio being played. Returns true if the bot is currently being played in a voice channel, otherwise false . Examples iex&gt; Remedy.Voice.join_channel(123456789, 420691337) iex&gt; Remedy.Voice.play(123456789, &quot;https://a-real-site.biz/RickRoll.m4a&quot;) iex&gt; Remedy.Voice.playing?(123456789) true iex&gt; Remedy.Voice.pause(123456789) iex&gt; Remedy.Voice.playing?(123456789) false","ref":"Remedy.Voice.html#playing?/1","title":"Remedy.Voice.playing?/1","type":"function"},{"doc":"Checks if the connection is up and ready to play audio. Parameters guild_id - ID of guild to check if voice connection is up. Returns true if the bot is connected to a voice channel, otherwise false . This function does not check if audio is already playing. For that, use playing?/1 . Examples iex&gt; Remedy.Voice.join_channel(123456789, 420691337) iex&gt; Remedy.Voice.ready?(123456789) true iex&gt; Remedy.Voice.leave_channel(123456789) iex&gt; Remedy.Voice.ready?(123456789) false","ref":"Remedy.Voice.html#ready?/1","title":"Remedy.Voice.ready?/1","type":"function"},{"doc":"Resumes playing the current paused sound in a voice channel. The bot must be connected to a voice channel in the guild specified. Parameters guild_id - ID of guild whose voice channel the sound will be resumed in. Returns {:error, reason} if unable to resume or no sound has been paused, otherwise returns :ok . This function is used to resume a sound that had previously been paused. Examples iex&gt; Remedy.Voice.join_channel(123456789, 420691337) iex&gt; Remedy.Voice.play(123456789, &quot;~/stuff/Toto - Africa (Bass Boosted)&quot;) iex&gt; Remedy.Voice.pause(123456789) iex&gt; Remedy.Voice.resume(123456789)","ref":"Remedy.Voice.html#resume/1","title":"Remedy.Voice.resume/1","type":"function"},{"doc":"Low-level. Send pre-encoded audio packets directly. Speaking should be set to true via Remedy.Voice.set_is_speaking/2 before sending frames. Opus frames will be encrypted and prefixed with the appropriate RTP header and sent immediately. The length of frames depends on how often you wish to send a sequence of frames. A single frame contains 20ms of audio. Sending more than 50 frames (1 second of audio) in a single function call may result in inconsistent playback rates. Remedy.Voice.playing?/1 will not return accurate values when using send_frames/2 instead of Remedy.Voice.play/4","ref":"Remedy.Voice.html#send_frames/2","title":"Remedy.Voice.send_frames/2","type":"function"},{"doc":"Low-level. Set speaking flag in voice channel. This function does not need to be called unless you are sending audio frames directly using Remedy.Voice.send_frames/2 .","ref":"Remedy.Voice.html#set_is_speaking/2","title":"Remedy.Voice.set_is_speaking/2","type":"function"},{"doc":"Stops the current sound being played in a voice channel. The bot must be connected to a voice channel in the guild specified. Parameters guild_id - ID of guild whose voice channel the sound will be stopped in. Returns {:error, reason} if unable to stop or no sound is playing, else :ok . If a sound has finished playing, this function does not need to be called to start playing another sound. Examples iex&gt; Remedy.Voice.join_channel(123456789, 420691337) iex&gt; Remedy.Voice.play(123456789, &quot;http://brandthill.com/files/weird_dubstep_noises.mp3&quot;) iex&gt; Remedy.Voice.stop(123456789)","ref":"Remedy.Voice.html#stop/1","title":"Remedy.Voice.stop/1","type":"function"},{"doc":"Voice Event","ref":"Remedy.Voice.Event.html","title":"Remedy.Voice.Event","type":"module"},{"doc":"","ref":"Remedy.Voice.Event.html#handle/3","title":"Remedy.Voice.Event.handle/3","type":"function"},{"doc":"Represents a failed response from the API. This occurs when hackney or HTTPoison fail, or when the API doesn't respond with 200 or 204 . This should only occur when using the banged API methods. Check the Format","ref":"Remedy.ApiError.html","title":"Remedy.ApiError","type":"exception"},{"doc":"","ref":"Remedy.ApiError.html#t:detailed_error/0","title":"Remedy.ApiError.detailed_error/0","type":"type"},{"doc":"","ref":"Remedy.ApiError.html#t:discord_status_code/0","title":"Remedy.ApiError.discord_status_code/0","type":"type"},{"doc":"","ref":"Remedy.ApiError.html#t:error/0","title":"Remedy.ApiError.error/0","type":"type"},{"doc":"","ref":"Remedy.ApiError.html#t:error_list_map/0","title":"Remedy.ApiError.error_list_map/0","type":"type"},{"doc":"","ref":"Remedy.ApiError.html#t:errors/0","title":"Remedy.ApiError.errors/0","type":"type"},{"doc":"","ref":"Remedy.ApiError.html#t:response/0","title":"Remedy.ApiError.response/0","type":"type"},{"doc":"","ref":"Remedy.ApiError.html#t:status_code/0","title":"Remedy.ApiError.status_code/0","type":"type"},{"doc":"","ref":"Remedy.ApiError.html#t:t/0","title":"Remedy.ApiError.t/0","type":"type"},{"doc":"Represents an error when interacting with the cache. This likely occurs because a specified item could not be found in the cache, or your were searching for something invalid. This should only occur when using the banged cache methods.","ref":"Remedy.CacheError.html","title":"Remedy.CacheError","type":"exception"},{"doc":"Raised when an environment variable cannot be found","ref":"Remedy.EnvironmentVariableError.html","title":"Remedy.EnvironmentVariableError","type":"exception"},{"doc":"Represents an error when playing sound through voice channels. This occurs when attempting to play audio and Porcelain can't find either the ffmpeg executable or the youtube-dl executable.","ref":"Remedy.VoiceError.html","title":"Remedy.VoiceError","type":"exception"},{"doc":"Remedy Playground fork of Nostrum discord library. I am still using Nostrum for my bots and I recommend you do the same. This is just a playground.","ref":"introduction.html","title":"Remedy","type":"extras"},{"doc":"Gun 2.0 Separate applicable components into their own packages. Organise types - Timestamp / Snowflake Convert structs to schema to... Make the casting easier. Make storing them in a db easier. Prevent the end user re modelling these things for their own db. Convert cache to Etso. integrate nicely with new schema. Generalize cache. Choose what to cache. eg i only want to cache user presence and message embeds... Make it an actual cache, aka invisible and if the resource is not in cache, we should fetch it and return it as required. Testing Supply a bot secret thru workflow to enable actual testing on a real server. without exposing secrets (prob too hard) Bang functions?!? Remove all the bloaty manual stuff. Include a generic unsafe.","ref":"introduction.html#goals","title":"Remedy - Goals","type":"extras"},{"doc":"I have extracted various components from the codebase which in my opinion are cluttering the code with static helpers at various layers of abstraction. You are welcome to use them and submit any improvements you find. Sunbake For easy types. Timestamp and Snowflake currently included. Battle Standard Clean up all those manual flag helpers. just use BattleStandard","ref":"introduction.html#packages","title":"Remedy - Packages","type":"extras"}]